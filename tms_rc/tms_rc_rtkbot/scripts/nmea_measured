#!/usr/bin/env python
# -*- coding:utf-8 -*-

import rospy
import math

from sensor_msgs.msg import NavSatFix
from nav_msgs.msg           import Odometry
from visualization_msgs.msg import Marker

class MeasuredDataClass:
  def __init__(self):

    '''
    self.ned_frame = rospy.get_param('~ned_frame', 'ned')
    self.odom_frame = rospy.get_param('~odom_frame', 'odom')
    self.base_frame = rospy.get_param('~base_frame', 'base_footprint')
    '''

    #self.sel_solutions = rospy.get_param('~sel_solutions', 'all')

    out_topic_name = rospy.get_param('~out_topic_name', 'odometry/measured')
    self.gps_pub = rospy.Publisher(out_topic_name, Odometry, queue_size=10)
    self.marker_pub = rospy.Publisher('/gps_marker', Marker, queue_size=10)
    
    rospy.Subscriber("/fix", NavSatFix, self.callback_gps, queue_size=10) # @TODO Topic名確認

    self.marker                 = Marker()
    self.marker.header.frame_id = 'world_link'
    self.marker.type            = 3 #cylinder
    self.marker.action          = 0 #add
    self.marker.scale.x         = 0.2
    self.marker.scale.y         = 0.2
    self.marker.scale.z         = 1.0
    self.marker.color.r         = 1.0
    self.marker.color.g         = 0.0
    self.marker.color.b         = 1.0
    self.marker.color.a         = 1.0
    self.marker.lifetime        = rospy.Duration(1.0)

    rate = rospy.Rate(10) # 10hz
    while not rospy.is_shutdown():
      rate.sleep()

  def callback_gps(self, data):
        
    lat, lon = data.latitude, data.longitude # lat: NS lon: EW

    '''
    odom                      = Odometry()
    odom.header.stamp         = rospy.Time.now()
    odom.header.frame_id      = self.ned_frame
    odom.child_frame_id       = self.odom_frame

    odom.pose.pose.position.x = data.relPosN / 100.0 + data.relPosHPN / 10000
    odom.pose.pose.position.y = data.relPosE / 100.0 + data.relPosHPE / 10000
    # odom.pose.pose.position.z = -(data.relPosD / 100.0)
    odom.pose.pose.orientation.w = 1.0

    self.marker.pose.position    = odom.pose.pose.position
    self.marker.pose.position.z  = 0.0
    self.marker.pose.orientation = odom.pose.pose.orientation
    self.marker_pub.publish(self.marker)

    if self.sel_solutions == "all":
      self.gps_pub.publish(odom)
      print("Publish All Solutions")
    elif self.sel_solutions == "fix":
      if data.flags == 23:
        self.gps_pub.publish(odom)
        print("Publish Fix Solutions")
      else:
        print("Could not get fix solutions")
    elif self.sel_solutions == "float":
      if data.flags == 15:
        self.gps_pub.publish(odom)
        print("Publish Float Solutions")
      else:
        print("Could not get float solutions")
    else:
      print("Param Setting Error")
    '''

if __name__ == '__main__':
  rospy.init_node('nmea_measured', anonymous=True)
  try:
    MeasuredDataClass()
    rospy.spin()
  except rospy.ROSInterruptException:
    rospy.loginfo("nmea_measured node finished.")
