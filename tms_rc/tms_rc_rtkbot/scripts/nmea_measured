#!/usr/bin/env python
# -*- coding:utf-8 -*-

import rospy
import math

from sensor_msgs.msg import NavSatFix
from sensor_msgs.msg import NavSatStatus
from nav_msgs.msg           import Odometry
from visualization_msgs.msg import Marker

class MeasuredDataClass:
  def __init__(self):

    '''
    self.ned_frame = rospy.get_param('~ned_frame', 'ned')
    self.odom_frame = rospy.get_param('~odom_frame', 'odom')
    self.base_frame = rospy.get_param('~base_frame', 'base_footprint')
    '''

    self.map_frame = rospy.get_param('~map_frame_name', 'map')
    self.odom_frame = rospy.get_param('~odom_frame_name', 'odom')

    # Get Params
    self.earth_radius = rospy.get_param('~earth_radius', 6378.137)
    self.origin_lat   = rospy.get_param('~origin_lat', 0.)
    self.origin_lon   = rospy.get_param('~origin_lon', 0.)
    self.angle_offset = rospy.get_param('~angle_offset', 0.) * math.pi / 180.0
    self.scale_offset = rospy.get_param('~scale_offset', 1.)
    self.sel_solutions = rospy.get_param('~sel_solutions', "fix")

    # GPS
    out_topic_name = rospy.get_param('~out_topic_name', 'odometry/measured')
    self.gps_pub = rospy.Publisher(out_topic_name, Odometry, queue_size=10)
    rospy.Subscriber("/fix", NavSatFix, self.callback_gps, queue_size=10)

    # Marker
    self.marker = Marker()
    self._init_marker()
    self.marker_pub = rospy.Publisher('/gps_marker', Marker, queue_size=10)

  def _init_marker(self):
    self.marker.header.frame_id = 'world_link'
    self.marker.type            = 3 #cylinder
    self.marker.action          = 0 #add
    self.marker.scale.x         = 0.2
    self.marker.scale.y         = 0.2
    self.marker.scale.z         = 1.0
    self.marker.color.a         = 1.0
    self.marker.lifetime        = rospy.Duration(1.0)

  def _latlon2xy(self, lat, lon): # lat: NS lon: EW
    x = self.earth_radius * (math.radians(lon) - math.radians(self.origin_lon)) * 1000.0
    y = self.earth_radius * (math.radians(lat) - math.radians(self.origin_lat)) * 1000.0
    tx = math.cos(self.angle_offset) * x - math.sin(self.angle_offset) * y
    ty = math.sin(self.angle_offset) * x + math.cos(self.angle_offset) * y
    ret_x = tx * self.scale_offset
    ret_y = ty * self.scale_offset
    return ret_x, ret_y

  def callback_gps(self, data):

    x, y = self._latlon2xy(data.latitude, data.longitude) # Converted Coordinates

    # Set Odom Topic
    odom                      = Odometry()
    odom.header.stamp         = rospy.Time.now()

    '''
    odom.header.frame_id      = self.ned_frame
    odom.child_frame_id       = self.odom_frame
    '''

    odom.header.frame_id      = self.map_frame
    odom.child_frame_id       = self.odom_frame

    odom.pose.pose.position.x = x
    odom.pose.pose.position.y = y
    odom.pose.pose.position.z = 0.0
    odom.pose.pose.orientation.x = 0.0
    odom.pose.pose.orientation.y = 0.0
    odom.pose.pose.orientation.z = 0.0
    odom.pose.pose.orientation.w = 1.0

    # Set Marker Topic
    self.marker.header.stamp = rospy.Time.now()
    self.marker.pose.position    = odom.pose.pose.position
    self.marker.pose.orientation = odom.pose.pose.orientation
    
    if data.status.status == NavSatStatus().STATUS_FIX: # Fix: Blue
      self.marker.color.r = 0.0
      self.marker.color.g = 0.0
      self.marker.color.b = 1.0
    elif data.status.status == NavSatStatus().STATUS_NO_FIX: # Float: Green
      self.marker.color.r = 0.0
      self.marker.color.g = 1.0
      self.marker.color.b = 0.0
    else: # Else: Red
      self.marker.color.r = 1.0
      self.marker.color.g = 0.0
      self.marker.color.b = 0.0

    # Publish Topics
    self.marker_pub.publish(self.marker)

    if self.sel_solutions == "all":
      self.gps_pub.publish(odom)
      print("Publish All Solutions")
    elif self.sel_solutions == "fix":
      if data.status.status == NavSatStatus().STATUS_FIX:
        self.gps_pub.publish(odom)
        print("Publish Fix Solutions")
      else:
        print("Could not get fix solutions")
    elif self.sel_solutions == "float":
      if data.status.status == NavSatStatus().STATUS_NO_FIX:
        self.gps_pub.publish(odom)
        print("Publish Float Solutions")
      else:
        print("Could not get float solutions")
    else:
      print("Param Setting Error")

if __name__ == '__main__':
  rospy.init_node('nmea_measured', anonymous=True)
  try:
    MeasuredDataClass()
    rospy.spin()
  except rospy.ROSInterruptException:
    rospy.loginfo("nmea_measured node finished.")
