#!/usr/bin/env python
# -*- coding:utf-8 -*-

import rospy
import message_filters
from nav_msgs.msg import Odometry
from sensor_msgs.msg import NavSatFix


# 当然callbackに3つのTopicが入らないと動かないので注意
class RtkP2senDiplexerClass:
    def __init__(self):
        # Params
        in_topic_p2sen = rospy.get_param('~in_topic_p2sen', 'ninebot_measured_pos')
        in_topic_gps = rospy.get_param('~in_topic_gps', 'odometry/measured')
        in_topic_navsat = rospy.get_param('~in_topic_navsat', 'gnss_data')
        out_topic_odom = rospy.get_param('~out_topic_odom', 'piyopiyo') # @FIXME

        # Pub, Sub
        self.sub_p2sen = message_filters.Subscriber(in_topic_p2sen, Odometry)
        self.sub_gps = message_filters.Subscriber(in_topic_gps, Odometry)
        self.sub_navsat = message_filters.Subscriber(in_topic_navsat, NavSatFix)
        self.pub = rospy.Publisher(out_topic_odom, Odometry, queue_size=100)

        # Message Filters
        ts = message_filters.ApproximateTimeSynchronizer(fs=[self.sub_p2sen, self.sub_gps, self.sub_navsat], queue_size=100, slop=5.0, allow_headerless=True)
        ts.registerCallback(self.callback)

    def callback(self, p2sen_odom, gps_odom, gps_navsat):

        gps_status = gps_navsat.status.status

        # gps_x, gps_y = gps_odom.pose.pose.position.x, gps_odom.pose.pose.position.y

        if gps_status == 0 or gps_status == 1:  # Invalid or Autonomous
            self.pub.publish(p2sen_odom)
        else:
            self.pub.publish(gps_odom)


if __name__ == '__main__':
    rospy.init_node('rtk_p2sen_diplexer', anonymous=True)
    try:
        RtkP2senDiplexerClass()
        rospy.spin()
    except rospy.ROSInterruptException:
        rospy.loginfo("rtk_p2sen_diplexer node finished.")
