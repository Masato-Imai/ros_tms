#!/usr/bin/env python
# -*- coding:utf-8 -*-
import rospy

from nav_msgs.msg import Odometry
from people_msgs.msg import People
from visualization_msgs.msg import Marker, MarkerArray

class MyMarker(Marker):
    def __init__(self):
        self.header.frame_id = "/world_link"
        self.header.stamp = rospy.Time.now()
        self.type = 10 # Mesh
        self.mesh_use_embedded_materials = True
        self.action = 0 # Add
        self.lifetime = rospy.Duration(0.5)

class VisualizeTrackingMarkerClass:
    def __init__(self):
        #marker_ninebot = Marker()

        self.pub_marker_people = rospy.Publisher(rospy.get_param('~people_marker_topic_name', 'marker_people'), MarkerArray, queue_size=1000)
        rospy.Subscriber("people_ninebot_cropped", People, self.callback_people, queue_size=1000)
        self.pub_marker_ninebot = rospy.Publisher(rospy.get_param('~ninebot_marker_topic_name', 'marker_ninebot'), Marker, queue_size=1000)
        rospy.Subscriber("ninebot_measured_pos", Odometry, self.callback_ninebot, queue_size=1000)        

    def callback_people(self, data):
        marker_people = MarkerArray()
        id = 10

        for p in data.people:
            marker_person = MyMarker()

            marker_person.id += 1
            marker_person.scale.x = 0.025
            marker_person.scale.y = 0.025
            marker_person.scale.z = 0.025
            marker_person.pose.position = p.position
            marker_person.pose.orientation.x = 0
            marker_person.pose.orientation.y = 0
            marker_person.pose.orientation.z = 0
            marker_person.pose.orientation.w = 1
            marker_person.mesh_resource = "package://tms_ss_pot/meshes/WalkingMan4.dae"

            marker_people.markers.push_back(marker_person)
        
        self.pub_marker_people.publish(marker_people)

    def callback_ninebot(self, data):
        marker_ninebot = MyMarker()

        marker_person.id = 1
        marker_person.scale.x = 0.01
        marker_person.scale.y = 0.01
        marker_person.scale.z = 0.01
        marker_person.pose.position = data.pose.pose.position
        marker_person.pose.orientation = data.pose.pose.orientation
        marker_person.mesh_resource = "package://tms_ss_pot/meshes/ninebot_v2.dae"

        self.pub_marker_ninebot.publish(marker_ninebot)  


if __name__ == "__main__":
    rospy.init_node("visualize_tracking_marker_class", anonymous=True)
    try:
        VisualizeTrackingMarkerClass()
        rospy.spin()
    except rospy.ROSInterruptException:
        rospy.loginfo("visualize_tracking_marker_class node finished.")
